#### nvshah

#### Category of the bug
- [ ] Question
- [ ] Solution
- [ ] Language
- [ ] Missing Test Cases 
- [x] Incorrect Test Case

#### Description of the bug
[Que](https://leetcode.com/problems/partition-array-into-two-arrays-to-minimize-sum-difference/description/)

Test Case : 69

**_Input :_** 
```
nums = [76,8,45,20,74,84,28,1]
```
Expected : 2 (GIVEN)
But
Actually Expected should be **_0_** because

> `nums` can be partitioned into 2 subarray ie `nums1=[76, 8, 84]` and `nums2=[45, 20, 74, 28, 1]` & `sum(nums1) - sum(nums2) = 0`



#### Code you used for Submit/Run operation

```
def findAllSums(nums):
    res = {sum(nums)}

    for i in range(1, len(nums)):
        res.update({sum(sub) for sub in combinations(nums, i)})
    
    return res 

def minAbsDifference(nums: List[int], goal: int) -> int:
    '''Meet in the Middle'''
    n = len(nums)
    m = n // 2
    sum1 = findAllSums(nums[:m])
    sum2 = findAllSums(nums[m:])

    if goal in sum1 or goal in sum2: return 0

    sum2 = sorted(sum2)

    ans = abs(goal) 

    n2 = len(sum2)
    for s1 in sum1:
        t = goal-s1 
        #if t == 0: return 0

        i = bisect.bisect(sum2, t) # Find pos for {t}

        # check two nearest value ie after & before
        if i < n2: # After
            diff = abs(sum2[i] - t)
            if diff == 0: return 0
            ans = min(ans, diff)
        
        if i > 0: # before
            diff = abs(t - sum2[i-1])
            if diff == 0: return 0
            ans = min(ans, diff)

    return ans

class Solution:
    def minimumDifference(self, nums: List[int]) -> int:
        if(len(nums) < 3):
            return abs(nums[1] - nums[0])
        total = sum(nums) 
        target1 = total // 2
        
        missing1 = minAbsDifference(nums, target1) 

        bag1 = target1-missing1 
        bag2 = total-bag1 
        
        return bag2-bag1
```

#### Language used for code : Python
<!-- C++ -->


#### Expected behavior
The answer should be **_0_** instead of 2 for aforementioned test-case 69 as 
> [76,8,45,20,74,84,28,1]  => [76, 8, 84] + [45, 20, 74, 28, 1]


#### Screenshots
![leetcode_partition_array_into_two_array_to_minimize_sum_difference](https://github.com/LeetCode-Feedback/LeetCode-Feedback/assets/32465989/1d98c0f8-cffa-4a28-9684-1bc5759be919)


#### Additional context